import v from '../../../index'

describe('Mime', () => {
  it('Should return the correct MIME type for each tested extension', async () => {
    expect(v.mime.type('123')).toEqual('application/vnd.lotus-1-2-3')
    expect(v.mime.type('ez')).toEqual('application/andrew-inset')
    expect(v.mime.type('aw')).toEqual('application/applixware')
    expect(v.mime.type('atom')).toEqual('application/atom+xml')
    expect(v.mime.type('atomcat')).toEqual('application/atomcat+xml')
    expect(v.mime.type('atomsvc')).toEqual('application/atomsvc+xml')
    expect(v.mime.type('ccxml')).toEqual('application/ccxml+xml')
    expect(v.mime.type('cu')).toEqual('application/cu-seeme')
    expect(v.mime.type('davmount')).toEqual('application/davmount+xml')
    expect(v.mime.type('ecma')).toEqual('application/ecmascript')
    expect(v.mime.type('emma')).toEqual('application/emma+xml')
    expect(v.mime.type('epub')).toEqual('application/epub+zip')
    expect(v.mime.type('pfr')).toEqual('application/font-tdpfr')
    expect(v.mime.type('gz')).toEqual('application/x-gzip')
    expect(v.mime.type('tgz')).toEqual('application/x-gzip')
    expect(v.mime.type('stk')).toEqual('application/hyperstudio')
    expect(v.mime.type('jar')).toEqual('application/java-archive')
    expect(v.mime.type('ser')).toEqual('application/java-serialized-object')
    expect(v.mime.type('class')).toEqual('application/java-vm')
    expect(v.mime.type('json')).toEqual('application/json')
    expect(v.mime.type('lostxml')).toEqual('application/lost+xml')
    expect(v.mime.type('hqx')).toEqual('application/mac-binhex40')
    expect(v.mime.type('cpt')).toEqual('application/mac-compactpro')
    expect(v.mime.type('mrc')).toEqual('application/marc')
    expect(v.mime.type('ma')).toEqual('application/mathematica')
    expect(v.mime.type('mb')).toEqual('application/mathematica')
    expect(v.mime.type('nb')).toEqual('application/mathematica')
    expect(v.mime.type('mathml')).toEqual('text/mathml')
    expect(v.mime.type('mml')).toEqual('text/mathml')
    expect(v.mime.type('mbox')).toEqual('application/mbox')
    expect(v.mime.type('mscml')).toEqual('application/mediaservercontrol+xml')
    expect(v.mime.type('mp4s')).toEqual('application/mp4')
    expect(v.mime.type('doc')).toEqual('application/msword')
    expect(v.mime.type('dot')).toEqual('application/msword')
    expect(v.mime.type('wiz')).toEqual('application/msword')
    expect(v.mime.type('mxf')).toEqual('application/mxf')
    expect(v.mime.type('a')).toEqual('application/octet-stream')
    expect(v.mime.type('bin')).toEqual('application/octet-stream')
    expect(v.mime.type('bpk')).toEqual('application/octet-stream')
    expect(v.mime.type('deploy')).toEqual('application/octet-stream')
    expect(v.mime.type('dist')).toEqual('application/octet-stream')
    expect(v.mime.type('distz')).toEqual('application/octet-stream')
    expect(v.mime.type('dmg')).toEqual('application/octet-stream')
    expect(v.mime.type('dms')).toEqual('application/octet-stream')
    expect(v.mime.type('dump')).toEqual('application/octet-stream')
    expect(v.mime.type('elc')).toEqual('application/octet-stream')
    expect(v.mime.type('lha')).toEqual('application/octet-stream')
    expect(v.mime.type('lrf')).toEqual('application/octet-stream')
    expect(v.mime.type('lzh')).toEqual('application/octet-stream')
    expect(v.mime.type('o')).toEqual('application/octet-stream')
    expect(v.mime.type('obj')).toEqual('application/octet-stream')
    expect(v.mime.type('pkg')).toEqual('application/octet-stream')
    expect(v.mime.type('so')).toEqual('application/octet-stream')
    expect(v.mime.type('oda')).toEqual('application/oda')
    expect(v.mime.type('opf')).toEqual('application/oebps-package+xml')
    expect(v.mime.type('ogx')).toEqual('application/ogg')
    expect(v.mime.type('onepkg')).toEqual('application/onenote')
    expect(v.mime.type('onetmp')).toEqual('application/onenote')
    expect(v.mime.type('onetoc')).toEqual('application/onenote')
    expect(v.mime.type('onetoc2')).toEqual('application/onenote')
    expect(v.mime.type('xer')).toEqual('application/patch-ops-error+xml')
    expect(v.mime.type('pdf')).toEqual('application/pdf')
    expect(v.mime.type('pgp')).toEqual('application/pgp-encrypted')
    expect(v.mime.type('asc')).toEqual('application/pgp-signature')
    expect(v.mime.type('sig')).toEqual('application/pgp-signature')
    expect(v.mime.type('prf')).toEqual('application/pics-rules')
    expect(v.mime.type('p10')).toEqual('application/pkcs10')
    expect(v.mime.type('p7c')).toEqual('application/pkcs7-mime')
    expect(v.mime.type('p7m')).toEqual('application/pkcs7-mime')
    expect(v.mime.type('p7s')).toEqual('application/pkcs7-signature')
    expect(v.mime.type('cer')).toEqual('application/pkix-cert')
    expect(v.mime.type('crl')).toEqual('application/pkix-crl')
    expect(v.mime.type('pkipath')).toEqual('application/pkix-pkipath')
    expect(v.mime.type('pki')).toEqual('application/pkixcmp')
    expect(v.mime.type('pls')).toEqual('application/pls+xml')
    expect(v.mime.type('ai')).toEqual('application/postscript')
    expect(v.mime.type('eps')).toEqual('application/postscript')
    expect(v.mime.type('ps')).toEqual('application/postscript')
    expect(v.mime.type('prql')).toEqual('application/prql')
    expect(v.mime.type('cww')).toEqual('application/prs.cww')
    expect(v.mime.type('rdf')).toEqual('application/rdf+xml')
    expect(v.mime.type('rif')).toEqual('application/reginfo+xml')
    expect(v.mime.type('rnc')).toEqual('application/relax-ng-compact-syntax')
    expect(v.mime.type('rl')).toEqual('application/resource-lists+xml')
    expect(v.mime.type('rld')).toEqual('application/resource-lists-diff+xml')
    expect(v.mime.type('rs')).toEqual('application/rls-services+xml')
    expect(v.mime.type('rsd')).toEqual('application/rsd+xml')
    expect(v.mime.type('rss')).toEqual('application/rss+xml')
    expect(v.mime.type('xml')).toEqual('application/xml')
    expect(v.mime.type('rtf')).toEqual('application/rtf')
    expect(v.mime.type('sbml')).toEqual('application/sbml+xml')
    expect(v.mime.type('scq')).toEqual('application/scvp-cv-request')
    expect(v.mime.type('scs')).toEqual('application/scvp-cv-response')
    expect(v.mime.type('spq')).toEqual('application/scvp-vp-request')
    expect(v.mime.type('spp')).toEqual('application/scvp-vp-response')
    expect(v.mime.type('sdp')).toEqual('application/sdp')
    expect(v.mime.type('setpay')).toEqual('application/set-payment-initiation')
    expect(v.mime.type('setreg')).toEqual('application/set-registration-initiation')
    expect(v.mime.type('shf')).toEqual('application/shf+xml')
    expect(v.mime.type('smi')).toEqual('application/smil+xml')
    expect(v.mime.type('smil')).toEqual('application/smil+xml')
    expect(v.mime.type('rq')).toEqual('application/sparql-query')
    expect(v.mime.type('srx')).toEqual('application/sparql-results+xml')
    expect(v.mime.type('gram')).toEqual('application/srgs')
    expect(v.mime.type('grxml')).toEqual('application/srgs+xml')
    expect(v.mime.type('ssml')).toEqual('application/ssml+xml')
    expect(v.mime.type('plb')).toEqual('application/vnd.3gpp.pic-bw-large')
    expect(v.mime.type('psb')).toEqual('application/vnd.3gpp.pic-bw-small')
    expect(v.mime.type('pvb')).toEqual('application/vnd.3gpp.pic-bw-var')
    expect(v.mime.type('tcap')).toEqual('application/vnd.3gpp2.tcap')
    expect(v.mime.type('pwn')).toEqual('application/vnd.3m.post-it-notes')
    expect(v.mime.type('aso')).toEqual('application/vnd.accpac.simply.aso')
    expect(v.mime.type('imp')).toEqual('application/vnd.accpac.simply.imp')
    expect(v.mime.type('acu')).toEqual('application/vnd.acucobol')
    expect(v.mime.type('acutc')).toEqual('application/vnd.acucorp')
    expect(v.mime.type('atc')).toEqual('application/vnd.acucorp')
    expect(v.mime.type('air')).toEqual('application/vnd.adobe.air-application-installer-package+zip')
    expect(v.mime.type('xdp')).toEqual('application/vnd.adobe.xdp+xml')
    expect(v.mime.type('xfdf')).toEqual('application/vnd.adobe.xfdf')
    expect(v.mime.type('azf')).toEqual('application/vnd.airzip.filesecure.azf')
    expect(v.mime.type('azs')).toEqual('application/vnd.airzip.filesecure.azs')
    expect(v.mime.type('azw')).toEqual('application/vnd.amazon.ebook')
    expect(v.mime.type('acc')).toEqual('application/vnd.americandynamics.acc')
    expect(v.mime.type('ami')).toEqual('application/vnd.amiga.ami')
    expect(v.mime.type('apk')).toEqual('application/vnd.android.package-archive')
    expect(v.mime.type('cii')).toEqual('application/vnd.anser-web-certificate-issue-initiation')
    expect(v.mime.type('fti')).toEqual('application/vnd.anser-web-funds-transfer-initiation')
    expect(v.mime.type('atx')).toEqual('application/vnd.antix.game-component')
    expect(v.mime.type('mpkg')).toEqual('application/vnd.apple.installer+xml')
    expect(v.mime.type('swi')).toEqual('application/vnd.arastra.swi')
    expect(v.mime.type('aep')).toEqual('application/vnd.audiograph')
    expect(v.mime.type('mpm')).toEqual('application/vnd.blueice.multipass')
    expect(v.mime.type('bmi')).toEqual('application/vnd.bmi')
    expect(v.mime.type('rep')).toEqual('application/vnd.businessobjects')
    expect(v.mime.type('cdxml')).toEqual('application/vnd.chemdraw+xml')
    expect(v.mime.type('mmd')).toEqual('application/vnd.chipnuts.karaoke-mmd')
    expect(v.mime.type('cdy')).toEqual('application/vnd.cinderella')
    expect(v.mime.type('cla')).toEqual('application/vnd.claymore')
    expect(v.mime.type('c4d')).toEqual('application/vnd.clonk.c4group')
    expect(v.mime.type('c4f')).toEqual('application/vnd.clonk.c4group')
    expect(v.mime.type('c4g')).toEqual('application/vnd.clonk.c4group')
    expect(v.mime.type('c4p')).toEqual('application/vnd.clonk.c4group')
    expect(v.mime.type('c4u')).toEqual('application/vnd.clonk.c4group')
    expect(v.mime.type('csp')).toEqual('application/vnd.commonspace')
    expect(v.mime.type('cdbcmsg')).toEqual('application/vnd.contact.cmsg')
    expect(v.mime.type('cmc')).toEqual('application/vnd.cosmocaller')
    expect(v.mime.type('clkx')).toEqual('application/vnd.crick.clicker')
    expect(v.mime.type('clkk')).toEqual('application/vnd.crick.clicker.keyboard')
    expect(v.mime.type('clkp')).toEqual('application/vnd.crick.clicker.palette')
    expect(v.mime.type('clkt')).toEqual('application/vnd.crick.clicker.template')
    expect(v.mime.type('clkw')).toEqual('application/vnd.crick.clicker.wordbank')
    expect(v.mime.type('wbs')).toEqual('application/vnd.criticaltools.wbs+xml')
    expect(v.mime.type('pml')).toEqual('application/vnd.ctc-posml')
    expect(v.mime.type('ppd')).toEqual('application/vnd.cups-ppd')
    expect(v.mime.type('car')).toEqual('application/vnd.curl.car')
    expect(v.mime.type('pcurl')).toEqual('application/vnd.curl.pcurl')
    expect(v.mime.type('rdz')).toEqual('application/vnd.data-vision.rdz')
    expect(v.mime.type('deb')).toEqual('application/x-debian-package')
    expect(v.mime.type('udeb')).toEqual('application/x-debian-package')
    expect(v.mime.type('fe_launch')).toEqual('application/vnd.denovo.fcselayout-link')
    expect(v.mime.type('dna')).toEqual('application/vnd.dna')
    expect(v.mime.type('mlp')).toEqual('application/vnd.dolby.mlp')
    expect(v.mime.type('dpg')).toEqual('application/vnd.dpgraph')
    expect(v.mime.type('dfac')).toEqual('application/vnd.dreamfactory')
    expect(v.mime.type('geo')).toEqual('application/vnd.dynageo')
    expect(v.mime.type('mag')).toEqual('application/vnd.ecowin.chart')
    expect(v.mime.type('nml')).toEqual('application/vnd.enliven')
    expect(v.mime.type('esf')).toEqual('application/vnd.epson.esf')
    expect(v.mime.type('msf')).toEqual('application/vnd.epson.msf')
    expect(v.mime.type('qam')).toEqual('application/vnd.epson.quickanime')
    expect(v.mime.type('slt')).toEqual('application/vnd.epson.salt')
    expect(v.mime.type('ssf')).toEqual('application/vnd.epson.ssf')
    expect(v.mime.type('es3')).toEqual('application/vnd.eszigno3+xml')
    expect(v.mime.type('et3')).toEqual('application/vnd.eszigno3+xml')
    expect(v.mime.type('ez2')).toEqual('application/vnd.ezpix-album')
    expect(v.mime.type('ez3')).toEqual('application/vnd.ezpix-package')
    expect(v.mime.type('fdf')).toEqual('application/vnd.fdf')
    expect(v.mime.type('mseed')).toEqual('application/vnd.fdsn.mseed')
    expect(v.mime.type('dataless')).toEqual('application/vnd.fdsn.seed')
    expect(v.mime.type('seed')).toEqual('application/vnd.fdsn.seed')
    expect(v.mime.type('gph')).toEqual('application/vnd.flographit')
    expect(v.mime.type('ftc')).toEqual('application/vnd.fluxtime.clip')
    expect(v.mime.type('book')).toEqual('application/vnd.framemaker')
    expect(v.mime.type('fm')).toEqual('application/vnd.framemaker')
    expect(v.mime.type('frame')).toEqual('application/vnd.framemaker')
    expect(v.mime.type('maker')).toEqual('application/vnd.framemaker')
    expect(v.mime.type('fnc')).toEqual('application/vnd.frogans.fnc')
    expect(v.mime.type('ltf')).toEqual('application/vnd.frogans.ltf')
    expect(v.mime.type('fsc')).toEqual('application/vnd.fsc.weblaunch')
    expect(v.mime.type('oas')).toEqual('application/vnd.fujitsu.oasys')
    expect(v.mime.type('oa2')).toEqual('application/vnd.fujitsu.oasys2')
    expect(v.mime.type('oa3')).toEqual('application/vnd.fujitsu.oasys3')
    expect(v.mime.type('fg5')).toEqual('application/vnd.fujitsu.oasysgp')
    expect(v.mime.type('bh2')).toEqual('application/vnd.fujitsu.oasysprs')
    expect(v.mime.type('ddd')).toEqual('application/vnd.fujixerox.ddd')
    expect(v.mime.type('xdw')).toEqual('application/vnd.fujixerox.docuworks')
    expect(v.mime.type('xbd')).toEqual('application/vnd.fujixerox.docuworks.binder')
    expect(v.mime.type('fzs')).toEqual('application/vnd.fuzzysheet')
    expect(v.mime.type('txd')).toEqual('application/vnd.genomatix.tuxedo')
    expect(v.mime.type('ggb')).toEqual('application/vnd.geogebra.file')
    expect(v.mime.type('ggt')).toEqual('application/vnd.geogebra.tool')
    expect(v.mime.type('gex')).toEqual('application/vnd.geometry-explorer')
    expect(v.mime.type('gre')).toEqual('application/vnd.geometry-explorer')
    expect(v.mime.type('gbr')).toEqual('application/vnd.gerber')
    expect(v.mime.type('gmx')).toEqual('application/vnd.gmx')
    expect(v.mime.type('kml')).toEqual('application/vnd.google-earth.kml+xml')
    expect(v.mime.type('kmz')).toEqual('application/vnd.google-earth.kmz')
    expect(v.mime.type('gqf')).toEqual('application/vnd.grafeq')
    expect(v.mime.type('gqs')).toEqual('application/vnd.grafeq')
    expect(v.mime.type('gac')).toEqual('application/vnd.groove-account')
    expect(v.mime.type('ghf')).toEqual('application/vnd.groove-help')
    expect(v.mime.type('gim')).toEqual('application/vnd.groove-identity-message')
    expect(v.mime.type('grv')).toEqual('application/vnd.groove-injector')
    expect(v.mime.type('gtm')).toEqual('application/vnd.groove-tool-message')
    expect(v.mime.type('tpl')).toEqual('application/vnd.groove-tool-template')
    expect(v.mime.type('vcg')).toEqual('application/vnd.groove-vcard')
    expect(v.mime.type('zmm')).toEqual('application/vnd.handheld-entertainment+xml')
    expect(v.mime.type('hbci')).toEqual('application/vnd.hbci')
    expect(v.mime.type('les')).toEqual('application/vnd.hhe.lesson-player')
    expect(v.mime.type('hpgl')).toEqual('application/vnd.hp-hpgl')
    expect(v.mime.type('hpid')).toEqual('application/vnd.hp-hpid')
    expect(v.mime.type('hps')).toEqual('application/vnd.hp-hps')
    expect(v.mime.type('jlt')).toEqual('application/vnd.hp-jlyt')
    expect(v.mime.type('pcl')).toEqual('application/vnd.hp-pcl')
    expect(v.mime.type('pclxl')).toEqual('application/vnd.hp-pclxl')
    expect(v.mime.type('sfd-hdstx')).toEqual('application/vnd.hydrostatix.sof-data')
    expect(v.mime.type('x3d')).toEqual('application/vnd.hzn-3d-crossword')
    expect(v.mime.type('mpy')).toEqual('application/vnd.ibm.minipay')
    expect(v.mime.type('afp')).toEqual('application/vnd.ibm.modcap')
    expect(v.mime.type('list3820')).toEqual('application/vnd.ibm.modcap')
    expect(v.mime.type('listafp')).toEqual('application/vnd.ibm.modcap')
    expect(v.mime.type('irm')).toEqual('application/vnd.ibm.rights-management')
    expect(v.mime.type('sc')).toEqual('application/vnd.ibm.secure-container')
    expect(v.mime.type('icc')).toEqual('application/vnd.iccprofile')
    expect(v.mime.type('icm')).toEqual('application/vnd.iccprofile')
    expect(v.mime.type('igl')).toEqual('application/vnd.igloader')
    expect(v.mime.type('ivp')).toEqual('application/vnd.immervision-ivp')
    expect(v.mime.type('ivu')).toEqual('application/vnd.immervision-ivu')
    expect(v.mime.type('xpw')).toEqual('application/vnd.intercon.formnet')
    expect(v.mime.type('xpx')).toEqual('application/vnd.intercon.formnet')
    expect(v.mime.type('qbo')).toEqual('application/vnd.intu.qbo')
    expect(v.mime.type('qfx')).toEqual('application/vnd.intu.qfx')
    expect(v.mime.type('rcprofile')).toEqual('application/vnd.ipunplugged.rcprofile')
    expect(v.mime.type('irp')).toEqual('application/vnd.irepository.package+xml')
    expect(v.mime.type('xpr')).toEqual('application/vnd.is-xpr')
    expect(v.mime.type('jam')).toEqual('application/vnd.jam')
    expect(v.mime.type('rms')).toEqual('application/vnd.jcp.javame.midlet-rms')
    expect(v.mime.type('jisp')).toEqual('application/vnd.jisp')
    expect(v.mime.type('joda')).toEqual('application/vnd.joost.joda-archive')
    expect(v.mime.type('ktr')).toEqual('application/vnd.kahootz')
    expect(v.mime.type('ktz')).toEqual('application/vnd.kahootz')
    expect(v.mime.type('karbon')).toEqual('application/vnd.kde.karbon')
    expect(v.mime.type('chrt')).toEqual('application/vnd.kde.kchart')
    expect(v.mime.type('kfo')).toEqual('application/vnd.kde.kformula')
    expect(v.mime.type('flw')).toEqual('application/vnd.kde.kivio')
    expect(v.mime.type('kon')).toEqual('application/vnd.kde.kontour')
    expect(v.mime.type('kpr')).toEqual('application/vnd.kde.kpresenter')
    expect(v.mime.type('kpt')).toEqual('application/vnd.kde.kpresenter')
    expect(v.mime.type('ksp')).toEqual('application/vnd.kde.kspread')
    expect(v.mime.type('kwd')).toEqual('application/vnd.kde.kword')
    expect(v.mime.type('kwt')).toEqual('application/vnd.kde.kword')
    expect(v.mime.type('htke')).toEqual('application/vnd.kenameaapp')
    expect(v.mime.type('kia')).toEqual('application/vnd.kidspiration')
    expect(v.mime.type('kne')).toEqual('application/vnd.kinar')
    expect(v.mime.type('knp')).toEqual('application/vnd.kinar')
    expect(v.mime.type('skd')).toEqual('application/vnd.koan')
    expect(v.mime.type('skm')).toEqual('application/vnd.koan')
    expect(v.mime.type('skp')).toEqual('application/vnd.koan')
    expect(v.mime.type('skt')).toEqual('application/vnd.koan')
    expect(v.mime.type('sse')).toEqual('application/vnd.kodak-descriptor')
    expect(v.mime.type('lbd')).toEqual('application/vnd.llamagraphics.life-balance.desktop')
    expect(v.mime.type('lbe')).toEqual('application/vnd.llamagraphics.life-balance.exchange+xml')
    expect(v.mime.type('apr')).toEqual('application/vnd.lotus-approach')
    expect(v.mime.type('pre')).toEqual('application/vnd.lotus-freelance')
    expect(v.mime.type('nsf')).toEqual('application/vnd.lotus-notes')
    expect(v.mime.type('org')).toEqual('application/vnd.lotus-organizer')
    expect(v.mime.type('scm')).toEqual('application/vnd.lotus-screencam')
    expect(v.mime.type('lwp')).toEqual('application/vnd.lotus-wordpro')
    expect(v.mime.type('portpkg')).toEqual('application/vnd.macports.portpkg')
    expect(v.mime.type('mcd')).toEqual('application/vnd.mcd')
    expect(v.mime.type('mc1')).toEqual('application/vnd.medcalcdata')
    expect(v.mime.type('cdkey')).toEqual('application/vnd.mediastation.cdkey')
    expect(v.mime.type('mwf')).toEqual('application/vnd.mfer')
    expect(v.mime.type('mfm')).toEqual('application/vnd.mfmp')
    expect(v.mime.type('flo')).toEqual('application/vnd.micrografx.flo')
    expect(v.mime.type('igx')).toEqual('application/vnd.micrografx.igx')
    expect(v.mime.type('mif')).toEqual('application/vnd.mif')
    expect(v.mime.type('daf')).toEqual('application/vnd.mobius.daf')
    expect(v.mime.type('dis')).toEqual('application/vnd.mobius.dis')
    expect(v.mime.type('mbk')).toEqual('application/vnd.mobius.mbk')
    expect(v.mime.type('mqy')).toEqual('application/vnd.mobius.mqy')
    expect(v.mime.type('msl')).toEqual('application/vnd.mobius.msl')
    expect(v.mime.type('plc')).toEqual('application/vnd.mobius.plc')
    expect(v.mime.type('txf')).toEqual('application/vnd.mobius.txf')
    expect(v.mime.type('mpn')).toEqual('application/vnd.mophun.application')
    expect(v.mime.type('mpc')).toEqual('application/vnd.mophun.certificate')
    expect(v.mime.type('xul')).toEqual('application/vnd.mozilla.xul+xml')
    expect(v.mime.type('cil')).toEqual('application/vnd.ms-artgalry')
    expect(v.mime.type('cab')).toEqual('application/vnd.ms-cab-compressed')
    expect(v.mime.type('xla')).toEqual('application/vnd.ms-excel')
    expect(v.mime.type('xlb')).toEqual('application/vnd.ms-excel')
    expect(v.mime.type('xlc')).toEqual('application/vnd.ms-excel')
    expect(v.mime.type('xlm')).toEqual('application/vnd.ms-excel')
    expect(v.mime.type('xls')).toEqual('application/vnd.ms-excel')
    expect(v.mime.type('xlt')).toEqual('application/vnd.ms-excel')
    expect(v.mime.type('xlw')).toEqual('application/vnd.ms-excel')
    expect(v.mime.type('xlam')).toEqual('application/vnd.ms-excel.addin.macroenabled.12')
    expect(v.mime.type('xlsb')).toEqual('application/vnd.ms-excel.sheet.binary.macroenabled.12')
    expect(v.mime.type('xlsm')).toEqual('application/vnd.ms-excel.sheet.macroenabled.12')
    expect(v.mime.type('xltm')).toEqual('application/vnd.ms-excel.template.macroenabled.12')
    expect(v.mime.type('eot')).toEqual('application/vnd.ms-fontobject')
    expect(v.mime.type('chm')).toEqual('application/vnd.ms-htmlhelp')
    expect(v.mime.type('ims')).toEqual('application/vnd.ms-ims')
    expect(v.mime.type('lrm')).toEqual('application/vnd.ms-lrm')
    expect(v.mime.type('cat')).toEqual('application/vnd.ms-pki.seccat')
    expect(v.mime.type('stl')).toEqual('application/vnd.ms-pki.stl')
    expect(v.mime.type('pot')).toEqual('application/vnd.ms-powerpoint')
    expect(v.mime.type('ppa')).toEqual('application/vnd.ms-powerpoint')
    expect(v.mime.type('pps')).toEqual('application/vnd.ms-powerpoint')
    expect(v.mime.type('ppt')).toEqual('application/vnd.ms-powerpoint')
    expect(v.mime.type('pwz')).toEqual('application/vnd.ms-powerpoint')
    expect(v.mime.type('ppam')).toEqual('application/vnd.ms-powerpoint.addin.macroenabled.12')
    expect(v.mime.type('pptm')).toEqual('application/vnd.ms-powerpoint.presentation.macroenabled.12')
    expect(v.mime.type('sldm')).toEqual('application/vnd.ms-powerpoint.slide.macroenabled.12')
    expect(v.mime.type('ppsm')).toEqual('application/vnd.ms-powerpoint.slideshow.macroenabled.12')
    expect(v.mime.type('potm')).toEqual('application/vnd.ms-powerpoint.template.macroenabled.12')
    expect(v.mime.type('mpp')).toEqual('application/vnd.ms-project')
    expect(v.mime.type('mpt')).toEqual('application/vnd.ms-project')
    expect(v.mime.type('docm')).toEqual('application/vnd.ms-word.document.macroenabled.12')
    expect(v.mime.type('dotm')).toEqual('application/vnd.ms-word.template.macroenabled.12')
    expect(v.mime.type('wcm')).toEqual('application/vnd.ms-works')
    expect(v.mime.type('wdb')).toEqual('application/vnd.ms-works')
    expect(v.mime.type('wks')).toEqual('application/vnd.ms-works')
    expect(v.mime.type('wps')).toEqual('application/vnd.ms-works')
    expect(v.mime.type('wpl')).toEqual('application/vnd.ms-wpl')
    expect(v.mime.type('xps')).toEqual('application/vnd.ms-xpsdocument')
    expect(v.mime.type('mseq')).toEqual('application/vnd.mseq')
    expect(v.mime.type('mus')).toEqual('application/vnd.musician')
    expect(v.mime.type('msty')).toEqual('application/vnd.muvee.style')
    expect(v.mime.type('nlu')).toEqual('application/vnd.neurolanguage.nlu')
    expect(v.mime.type('nnd')).toEqual('application/vnd.noblenet-directory')
    expect(v.mime.type('nns')).toEqual('application/vnd.noblenet-sealer')
    expect(v.mime.type('nnw')).toEqual('application/vnd.noblenet-web')
    expect(v.mime.type('ngdat')).toEqual('application/vnd.nokia.n-gage.data')
    expect(v.mime.type('n-gage')).toEqual('application/vnd.nokia.n-gage.symbian.install')
    expect(v.mime.type('rpst')).toEqual('application/vnd.nokia.radio-preset')
    expect(v.mime.type('rpss')).toEqual('application/vnd.nokia.radio-presets')
    expect(v.mime.type('edm')).toEqual('application/vnd.novadigm.edm')
    expect(v.mime.type('edx')).toEqual('application/vnd.novadigm.edx')
    expect(v.mime.type('ext')).toEqual('application/vnd.novadigm.ext')
    expect(v.mime.type('odc')).toEqual('application/vnd.oasis.opendocument.chart')
    expect(v.mime.type('otc')).toEqual('application/vnd.oasis.opendocument.chart-template')
    expect(v.mime.type('odb')).toEqual('application/vnd.oasis.opendocument.database')
    expect(v.mime.type('odf')).toEqual('application/vnd.oasis.opendocument.formula')
    expect(v.mime.type('odft')).toEqual('application/vnd.oasis.opendocument.formula-template')
    expect(v.mime.type('odg')).toEqual('application/vnd.oasis.opendocument.graphics')
    expect(v.mime.type('otg')).toEqual('application/vnd.oasis.opendocument.graphics-template')
    expect(v.mime.type('odi')).toEqual('application/vnd.oasis.opendocument.image')
    expect(v.mime.type('oti')).toEqual('application/vnd.oasis.opendocument.image-template')
    expect(v.mime.type('odp')).toEqual('application/vnd.oasis.opendocument.presentation')
    expect(v.mime.type('otp')).toEqual('application/vnd.oasis.opendocument.presentation-template')
    expect(v.mime.type('ods')).toEqual('application/vnd.oasis.opendocument.spreadsheet')
    expect(v.mime.type('ots')).toEqual('application/vnd.oasis.opendocument.spreadsheet-template')
    expect(v.mime.type('odt')).toEqual('application/vnd.oasis.opendocument.text')
    expect(v.mime.type('otm')).toEqual('application/vnd.oasis.opendocument.text-master')
    expect(v.mime.type('ott')).toEqual('application/vnd.oasis.opendocument.text-template')
    expect(v.mime.type('oth')).toEqual('application/vnd.oasis.opendocument.text-web')
    expect(v.mime.type('xo')).toEqual('application/vnd.olpc-sugar')
    expect(v.mime.type('dd2')).toEqual('application/vnd.oma.dd2+xml')
    expect(v.mime.type('oxt')).toEqual('application/vnd.openofficeorg.extension')
    expect(v.mime.type('pptx')).toEqual('application/vnd.openxmlformats-officedocument.presentationml.presentation')
    expect(v.mime.type('sldx')).toEqual('application/vnd.openxmlformats-officedocument.presentationml.slide')
    expect(v.mime.type('ppsx')).toEqual('application/vnd.openxmlformats-officedocument.presentationml.slideshow')
    expect(v.mime.type('potx')).toEqual('application/vnd.openxmlformats-officedocument.presentationml.template')
    expect(v.mime.type('xlsx')).toEqual('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    expect(v.mime.type('xltx')).toEqual('application/vnd.openxmlformats-officedocument.spreadsheetml.template')
    expect(v.mime.type('docx')).toEqual('application/vnd.openxmlformats-officedocument.wordprocessingml.document')
    expect(v.mime.type('dotx')).toEqual('application/vnd.openxmlformats-officedocument.wordprocessingml.template')
    expect(v.mime.type('dp')).toEqual('application/vnd.osgi.dp')
    expect(v.mime.type('oprc')).toEqual('application/vnd.palm')
    expect(v.mime.type('pdb')).toEqual('application/vnd.palm')
    expect(v.mime.type('pqa')).toEqual('application/vnd.palm')
    expect(v.mime.type('str')).toEqual('application/vnd.pg.format')
    expect(v.mime.type('ei6')).toEqual('application/vnd.pg.osasli')
    expect(v.mime.type('efif')).toEqual('application/vnd.picsel')
    expect(v.mime.type('plf')).toEqual('application/vnd.pocketlearn')
    expect(v.mime.type('pbd')).toEqual('application/vnd.powerbuilder6')
    expect(v.mime.type('box')).toEqual('application/vnd.previewsystems.box')
    expect(v.mime.type('mgz')).toEqual('application/vnd.proteus.magazine')
    expect(v.mime.type('qps')).toEqual('application/vnd.publishare-delta-tree')
    expect(v.mime.type('ptid')).toEqual('application/vnd.pvi.ptid1')
    expect(v.mime.type('qwd')).toEqual('application/vnd.quark.quarkxpress')
    expect(v.mime.type('qwt')).toEqual('application/vnd.quark.quarkxpress')
    expect(v.mime.type('qxb')).toEqual('application/vnd.quark.quarkxpress')
    expect(v.mime.type('qxd')).toEqual('application/vnd.quark.quarkxpress')
    expect(v.mime.type('qxl')).toEqual('application/vnd.quark.quarkxpress')
    expect(v.mime.type('qxt')).toEqual('application/vnd.quark.quarkxpress')
    expect(v.mime.type('rar')).toEqual('application/x-rar-compressed')
    expect(v.mime.type('mxl')).toEqual('application/vnd.recordare.musicxml')
    expect(v.mime.type('musicxml')).toEqual('application/vnd.recordare.musicxml+xml')
    expect(v.mime.type('cod')).toEqual('application/vnd.rim.cod')
    expect(v.mime.type('rm')).toEqual('application/vnd.rn-realmedia')
    expect(v.mime.type('link66')).toEqual('application/vnd.route66.link66+xml')
    expect(v.mime.type('see')).toEqual('application/vnd.seemail')
    expect(v.mime.type('sema')).toEqual('application/vnd.sema')
    expect(v.mime.type('semd')).toEqual('application/vnd.semd')
    expect(v.mime.type('semf')).toEqual('application/vnd.semf')
    expect(v.mime.type('ifm')).toEqual('application/vnd.shana.informed.formdata')
    expect(v.mime.type('itp')).toEqual('application/vnd.shana.informed.formtemplate')
    expect(v.mime.type('iif')).toEqual('application/vnd.shana.informed.interchange')
    expect(v.mime.type('ipk')).toEqual('application/vnd.shana.informed.package')
    expect(v.mime.type('twd')).toEqual('application/vnd.simtech-mindmapper')
    expect(v.mime.type('twds')).toEqual('application/vnd.simtech-mindmapper')
    expect(v.mime.type('mmf')).toEqual('application/vnd.smaf')
    expect(v.mime.type('teacher')).toEqual('application/vnd.smart.teacher')
    expect(v.mime.type('sdkd')).toEqual('application/vnd.solent.sdkm+xml')
    expect(v.mime.type('sdkm')).toEqual('application/vnd.solent.sdkm+xml')
    expect(v.mime.type('dxp')).toEqual('application/vnd.spotfire.dxp')
    expect(v.mime.type('sfs')).toEqual('application/vnd.spotfire.sfs')
    expect(v.mime.type('db')).toEqual('application/x-sqlite3')
    expect(v.mime.type('sqlite')).toEqual('application/x-sqlite3')
    expect(v.mime.type('sqlite3')).toEqual('application/x-sqlite3')
    expect(v.mime.type('db-wal')).toEqual('application/x-sqlite3')
    expect(v.mime.type('sqlite-wal')).toEqual('application/x-sqlite3')
    expect(v.mime.type('db-shm')).toEqual('application/x-sqlite3')
    expect(v.mime.type('sqlite-shm')).toEqual('application/x-sqlite3')
    expect(v.mime.type('sdc')).toEqual('application/vnd.stardivision.calc')
    expect(v.mime.type('sda')).toEqual('application/vnd.stardivision.draw')
    expect(v.mime.type('sdd')).toEqual('application/vnd.stardivision.impress')
    expect(v.mime.type('smf')).toEqual('application/vnd.stardivision.math')
    expect(v.mime.type('sdw')).toEqual('application/vnd.stardivision.writer')
    expect(v.mime.type('vor')).toEqual('application/vnd.stardivision.writer')
    expect(v.mime.type('sgl')).toEqual('application/vnd.stardivision.writer-global')
    expect(v.mime.type('sxc')).toEqual('application/vnd.sun.xml.calc')
    expect(v.mime.type('stc')).toEqual('application/vnd.sun.xml.calc.template')
    expect(v.mime.type('sxd')).toEqual('application/vnd.sun.xml.draw')
    expect(v.mime.type('std')).toEqual('application/vnd.sun.xml.draw.template')
    expect(v.mime.type('sxi')).toEqual('application/vnd.sun.xml.impress')
    expect(v.mime.type('sti')).toEqual('application/vnd.sun.xml.impress.template')
    expect(v.mime.type('sxm')).toEqual('application/vnd.sun.xml.math')
    expect(v.mime.type('sxw')).toEqual('application/vnd.sun.xml.writer')
    expect(v.mime.type('sxg')).toEqual('application/vnd.sun.xml.writer.global')
    expect(v.mime.type('stw')).toEqual('application/vnd.sun.xml.writer.template')
    expect(v.mime.type('sus')).toEqual('application/vnd.sus-calendar')
    expect(v.mime.type('susp')).toEqual('application/vnd.sus-calendar')
    expect(v.mime.type('svd')).toEqual('application/vnd.svd')
    expect(v.mime.type('sis')).toEqual('application/vnd.symbian.install')
    expect(v.mime.type('sisx')).toEqual('application/vnd.symbian.install')
    expect(v.mime.type('xsm')).toEqual('application/vnd.syncml+xml')
    expect(v.mime.type('bdm')).toEqual('application/vnd.syncml.dm+wbxml')
    expect(v.mime.type('xdm')).toEqual('application/vnd.syncml.dm+xml')
    expect(v.mime.type('tao')).toEqual('application/vnd.tao.intent-module-archive')
    expect(v.mime.type('tmo')).toEqual('application/vnd.tmobile-livetv')
    expect(v.mime.type('tpt')).toEqual('application/vnd.trid.tpt')
    expect(v.mime.type('mxs')).toEqual('application/vnd.triscape.mxs')
    expect(v.mime.type('tra')).toEqual('application/vnd.trueapp')
    expect(v.mime.type('ufd')).toEqual('application/vnd.ufdl')
    expect(v.mime.type('ufdl')).toEqual('application/vnd.ufdl')
    expect(v.mime.type('utz')).toEqual('application/vnd.uiq.theme')
    expect(v.mime.type('umj')).toEqual('application/vnd.umajin')
    expect(v.mime.type('unityweb')).toEqual('application/vnd.unity')
    expect(v.mime.type('uoml')).toEqual('application/vnd.uoml+xml')
    expect(v.mime.type('vcx')).toEqual('application/vnd.vcx')
    expect(v.mime.type('vsd')).toEqual('application/vnd.visio')
    expect(v.mime.type('vss')).toEqual('application/vnd.visio')
    expect(v.mime.type('vst')).toEqual('application/vnd.visio')
    expect(v.mime.type('vsw')).toEqual('application/vnd.visio')
    expect(v.mime.type('vsdx')).toEqual('application/vnd.visio')
    expect(v.mime.type('vssx')).toEqual('application/vnd.visio')
    expect(v.mime.type('vstx')).toEqual('application/vnd.visio')
    expect(v.mime.type('vssm')).toEqual('application/vnd.visio')
    expect(v.mime.type('vstm')).toEqual('application/vnd.visio')
    expect(v.mime.type('vis')).toEqual('application/vnd.visionary')
    expect(v.mime.type('vsf')).toEqual('application/vnd.vsf')
    expect(v.mime.type('sic')).toEqual('application/vnd.wap.sic')
    expect(v.mime.type('slc')).toEqual('application/vnd.wap.slc')
    expect(v.mime.type('wbxml')).toEqual('application/vnd.wap.wbxml')
    expect(v.mime.type('wmlc')).toEqual('application/vnd.wap.wmlc')
    expect(v.mime.type('wmlsc')).toEqual('application/vnd.wap.wmlscriptc')
    expect(v.mime.type('wtb')).toEqual('application/vnd.webturbo')
    expect(v.mime.type('wpd')).toEqual('application/vnd.wordperfect')
    expect(v.mime.type('wqd')).toEqual('application/vnd.wqd')
    expect(v.mime.type('stf')).toEqual('application/vnd.wt.stf')
    expect(v.mime.type('xar')).toEqual('application/vnd.xara')
    expect(v.mime.type('xfdl')).toEqual('application/vnd.xfdl')
    expect(v.mime.type('hvd')).toEqual('application/vnd.yamaha.hv-dic')
    expect(v.mime.type('hvs')).toEqual('application/vnd.yamaha.hv-script')
    expect(v.mime.type('hvp')).toEqual('application/vnd.yamaha.hv-voice')
    expect(v.mime.type('osf')).toEqual('application/vnd.yamaha.openscoreformat')
    expect(v.mime.type('osfpvg')).toEqual('application/vnd.yamaha.openscoreformat.osfpvg+xml')
    expect(v.mime.type('saf')).toEqual('application/vnd.yamaha.smaf-audio')
    expect(v.mime.type('spf')).toEqual('application/vnd.yamaha.smaf-phrase')
    expect(v.mime.type('cmp')).toEqual('application/vnd.yellowriver-custom-menu')
    expect(v.mime.type('zir')).toEqual('application/vnd.zul')
    expect(v.mime.type('zirz')).toEqual('application/vnd.zul')
    expect(v.mime.type('zaz')).toEqual('application/vnd.zzazz.deck+xml')
    expect(v.mime.type('vxml')).toEqual('application/voicexml+xml')
    expect(v.mime.type('wasm')).toEqual('application/wasm')
    expect(v.mime.type('hlp')).toEqual('application/winhlp')
    expect(v.mime.type('wsdl')).toEqual('application/wsdl+xml')
    expect(v.mime.type('wspolicy')).toEqual('application/wspolicy+xml')
    expect(v.mime.type('7z')).toEqual('application/x-7z-compressed')
    expect(v.mime.type('abw')).toEqual('application/x-abiword')
    expect(v.mime.type('zabw')).toEqual('application/x-abiword')
    expect(v.mime.type('abw.gz')).toEqual('application/x-abiword')
    expect(v.mime.type('ace')).toEqual('application/x-ace-compressed')
    expect(v.mime.type('aab')).toEqual('application/x-authorware-bin')
    expect(v.mime.type('u32')).toEqual('application/x-authorware-bin')
    expect(v.mime.type('vox')).toEqual('application/x-authorware-bin')
    expect(v.mime.type('x32')).toEqual('application/x-authorware-bin')
    expect(v.mime.type('aam')).toEqual('application/x-authorware-map')
    expect(v.mime.type('aas')).toEqual('application/x-authorware-seg')
    expect(v.mime.type('bcpio')).toEqual('application/x-bcpio')
    expect(v.mime.type('torrent')).toEqual('application/x-bittorrent')
    expect(v.mime.type('bz')).toEqual('application/x-bzip')
    expect(v.mime.type('boz')).toEqual('application/x-bzip2')
    expect(v.mime.type('bz2')).toEqual('application/x-bzip2')
    expect(v.mime.type('vcd')).toEqual('application/x-cdlink')
    expect(v.mime.type('chat')).toEqual('application/x-chat')
    expect(v.mime.type('pgn')).toEqual('application/x-chess-pgn')
    expect(v.mime.type('cpio')).toEqual('application/x-cpio')
    expect(v.mime.type('csh')).toEqual('application/x-csh')
    expect(v.mime.type('cct')).toEqual('application/x-director')
    expect(v.mime.type('cst')).toEqual('application/x-director')
    expect(v.mime.type('cxt')).toEqual('application/x-director')
    expect(v.mime.type('dcr')).toEqual('image/x-kodak-dcr')
    expect(v.mime.type('dir')).toEqual('application/x-director')
    expect(v.mime.type('dxr')).toEqual('application/x-director')
    expect(v.mime.type('fgd')).toEqual('application/x-director')
    expect(v.mime.type('swa')).toEqual('application/x-director')
    expect(v.mime.type('w3d')).toEqual('application/x-director')
    expect(v.mime.type('wad')).toEqual('application/x-doom')
    expect(v.mime.type('ncx')).toEqual('application/x-dtbncx+xml')
    expect(v.mime.type('dtb')).toEqual('application/x-dtbook+xml')
    expect(v.mime.type('res')).toEqual('application/x-dtbresource+xml')
    expect(v.mime.type('dvi')).toEqual('application/x-dvi')
    expect(v.mime.type('bdf')).toEqual('application/x-font-bdf')
    expect(v.mime.type('gsf')).toEqual('application/x-font-ghostscript')
    expect(v.mime.type('psf')).toEqual('application/x-font-linux-psf')
    expect(v.mime.type('otf')).toEqual('font/otf')
    expect(v.mime.type('pcf')).toEqual('application/x-font-pcf')
    expect(v.mime.type('snf')).toEqual('application/x-font-snf')
    expect(v.mime.type('ttc')).toEqual('application/x-font-ttf')
    expect(v.mime.type('ttf')).toEqual('application/x-font-ttf')
    expect(v.mime.type('afm')).toEqual('application/x-font-type1')
    expect(v.mime.type('pfa')).toEqual('application/x-font-type1')
    expect(v.mime.type('pfb')).toEqual('application/x-font-type1')
    expect(v.mime.type('pfm')).toEqual('application/x-font-type1')
    expect(v.mime.type('spl')).toEqual('application/x-futuresplash')
    expect(v.mime.type('gnumeric')).toEqual('application/x-gnumeric')
    expect(v.mime.type('gtar')).toEqual('application/x-gtar')
    expect(v.mime.type('hdf')).toEqual('application/x-hdf')
    expect(v.mime.type('iso')).toEqual('application/x-iso9660-image')
    expect(v.mime.type('isoimg')).toEqual('application/x-iso9660-image')
    expect(v.mime.type('cdr')).toEqual('application/x-iso9660-image')
    expect(v.mime.type('jnlp')).toEqual('application/x-java-jnlp-file')
    expect(v.mime.type('kil')).toEqual('application/x-killustrator')
    expect(v.mime.type('kra')).toEqual('application/x-krita')
    expect(v.mime.type('krz')).toEqual('application/x-krita')
    expect(v.mime.type('latex')).toEqual('application/x-latex')
    expect(v.mime.type('mobi')).toEqual('application/x-mobipocket-ebook')
    expect(v.mime.type('prc')).toEqual('application/x-mobipocket-ebook')
    expect(v.mime.type('application')).toEqual('application/x-ms-application')
    expect(v.mime.type('wmd')).toEqual('application/x-ms-wmd')
    expect(v.mime.type('wmz')).toEqual('application/x-ms-wmz')
    expect(v.mime.type('xbap')).toEqual('application/x-ms-xbap')
    expect(v.mime.type('mdb')).toEqual('application/x-msaccess')
    expect(v.mime.type('obd')).toEqual('application/x-msbinder')
    expect(v.mime.type('crd')).toEqual('application/x-mscardfile')
    expect(v.mime.type('clp')).toEqual('application/x-msclip')
    expect(v.mime.type('bat')).toEqual('application/x-msdownload')
    expect(v.mime.type('com')).toEqual('application/x-msdownload')
    expect(v.mime.type('dll')).toEqual('application/x-msdownload')
    expect(v.mime.type('exe')).toEqual('application/x-msdownload')
    expect(v.mime.type('msi')).toEqual('application/x-msdownload')
    expect(v.mime.type('m13')).toEqual('application/x-msmediaview')
    expect(v.mime.type('m14')).toEqual('application/x-msmediaview')
    expect(v.mime.type('mvb')).toEqual('application/x-msmediaview')
    expect(v.mime.type('wmf')).toEqual('application/x-msmetafile')
    expect(v.mime.type('mny')).toEqual('application/x-msmoney')
    expect(v.mime.type('pub')).toEqual('application/x-mspublisher')
    expect(v.mime.type('scd')).toEqual('application/x-msschedule')
    expect(v.mime.type('trm')).toEqual('application/x-msterminal')
    expect(v.mime.type('wri')).toEqual('application/x-mswrite')
    expect(v.mime.type('cdf')).toEqual('application/x-netcdf')
    expect(v.mime.type('nc')).toEqual('application/x-netcdf')
    expect(v.mime.type('pm')).toEqual('application/x-perl')
    expect(v.mime.type('pl')).toEqual('text/plain')
    expect(v.mime.type('p12')).toEqual('application/x-pkcs12')
    expect(v.mime.type('pfx')).toEqual('application/x-pkcs12')
    expect(v.mime.type('p7b')).toEqual('application/x-pkcs7-certificates')
    expect(v.mime.type('spc')).toEqual('application/x-pkcs7-certificates')
    expect(v.mime.type('p7r')).toEqual('application/x-pkcs7-certreqresp')
    expect(v.mime.type('pyc')).toEqual('application/x-python-code')
    expect(v.mime.type('pyo')).toEqual('application/x-python-code')
    expect(v.mime.type('rpa')).toEqual('application/x-redhat-package-manager')
    expect(v.mime.type('rpm')).toEqual('application/x-rpm')
    expect(v.mime.type('sh')).toEqual('application/x-shellscript')
    expect(v.mime.type('shar')).toEqual('application/x-shar')
    expect(v.mime.type('swf')).toEqual('application/x-shockwave-flash')
    expect(v.mime.type('xap')).toEqual('application/x-silverlight-app')
    expect(v.mime.type('sit')).toEqual('application/x-stuffit')
    expect(v.mime.type('sitx')).toEqual('application/x-stuffitx')
    expect(v.mime.type('sv4cpio')).toEqual('application/x-sv4cpio')
    expect(v.mime.type('sv4crc')).toEqual('application/x-sv4crc')
    expect(v.mime.type('tar')).toEqual('application/x-tar')
    expect(v.mime.type('tcl')).toEqual('application/x-tcl')
    expect(v.mime.type('tex')).toEqual('application/x-tex')
    expect(v.mime.type('tfm')).toEqual('application/x-tex-tfm')
    expect(v.mime.type('texi')).toEqual('application/x-texinfo')
    expect(v.mime.type('texinfo')).toEqual('application/x-texinfo')
    expect(v.mime.type('ustar')).toEqual('application/x-ustar')
    expect(v.mime.type('src')).toEqual('application/x-wais-source')
    expect(v.mime.type('crt')).toEqual('application/x-x509-ca-cert')
    expect(v.mime.type('der')).toEqual('application/x-x509-ca-cert')
    expect(v.mime.type('fig')).toEqual('application/x-xfig')
    expect(v.mime.type('xpi')).toEqual('application/x-xpinstall')
    expect(v.mime.type('zip')).toEqual('application/zip-compressed')
    expect(v.mime.type('xenc')).toEqual('application/xenc+xml')
    expect(v.mime.type('xht')).toEqual('application/xhtml+xml')
    expect(v.mime.type('xhtml')).toEqual('application/xhtml+xml')
    expect(v.mime.type('xpdl')).toEqual('application/xml')
    expect(v.mime.type('xsl')).toEqual('application/xml')
    expect(v.mime.type('dtd')).toEqual('application/xml-dtd')
    expect(v.mime.type('xop')).toEqual('application/xop+xml')
    expect(v.mime.type('xslt')).toEqual('application/xslt+xml')
    expect(v.mime.type('xspf')).toEqual('application/xspf+xml')
    expect(v.mime.type('mxml')).toEqual('application/xv+xml')
    expect(v.mime.type('xhvml')).toEqual('application/xv+xml')
    expect(v.mime.type('xvm')).toEqual('application/xv+xml')
    expect(v.mime.type('xvml')).toEqual('application/xv+xml')
    expect(v.mime.type('yaml')).toEqual('application/yaml')
    expect(v.mime.type('yml')).toEqual('application/yaml')
    expect(v.mime.type('3g2')).toEqual('video/3gpp2')
    expect(v.mime.type('aac')).toEqual('audio/aac')
    expect(v.mime.type('m4a')).toEqual('audio/mp4')
    expect(v.mime.type('aacp')).toEqual('audio/aacp')
    expect(v.mime.type('adp')).toEqual('audio/adpcm')
    expect(v.mime.type('aiff')).toEqual('audio/aiff')
    expect(v.mime.type('aif')).toEqual('audio/aiff')
    expect(v.mime.type('aff')).toEqual('audio/aiff')
    expect(v.mime.type('au')).toEqual('audio/basic')
    expect(v.mime.type('snd')).toEqual('audio/basic')
    expect(v.mime.type('flac')).toEqual('audio/flac')
    expect(v.mime.type('kar')).toEqual('audio/midi')
    expect(v.mime.type('mid')).toEqual('audio/midi')
    expect(v.mime.type('midi')).toEqual('audio/midi')
    expect(v.mime.type('rmi')).toEqual('audio/midi')
    expect(v.mime.type('mp4')).toEqual('video/mp4')
    expect(v.mime.type('m4b')).toEqual('audio/mp4')
    expect(v.mime.type('m4p')).toEqual('audio/mp4')
    expect(v.mime.type('m4r')).toEqual('audio/mp4')
    expect(v.mime.type('m4v')).toEqual('video/x-m4v')
    expect(v.mime.type('mp4v')).toEqual('video/mp4')
    expect(v.mime.type('3gp')).toEqual('video/3gpp')
    expect(v.mime.type('3ga')).toEqual('audio/mp4')
    expect(v.mime.type('3gpa')).toEqual('audio/mp4')
    expect(v.mime.type('3gpp')).toEqual('audio/mp4')
    expect(v.mime.type('3gpp2')).toEqual('audio/mp4')
    expect(v.mime.type('3gp2')).toEqual('audio/mp4')
    expect(v.mime.type('m2a')).toEqual('audio/mpeg')
    expect(v.mime.type('m3a')).toEqual('audio/mpeg')
    expect(v.mime.type('mp2')).toEqual('audio/mpeg')
    expect(v.mime.type('mp2a')).toEqual('audio/mpeg')
    expect(v.mime.type('mp3')).toEqual('audio/mpeg')
    expect(v.mime.type('mpga')).toEqual('audio/mpeg')
    expect(v.mime.type('oga')).toEqual('audio/ogg')
    expect(v.mime.type('ogg')).toEqual('audio/ogg')
    expect(v.mime.type('spx')).toEqual('audio/ogg')
    expect(v.mime.type('opus')).toEqual('audio/opus')
    expect(v.mime.type('eol')).toEqual('audio/vnd.digital-winds')
    expect(v.mime.type('dts')).toEqual('audio/vnd.dts')
    expect(v.mime.type('dtshd')).toEqual('audio/vnd.dts.hd')
    expect(v.mime.type('lvp')).toEqual('audio/vnd.lucent.voice')
    expect(v.mime.type('pya')).toEqual('audio/vnd.ms-playready.media.pya')
    expect(v.mime.type('ecelp4800')).toEqual('audio/vnd.nuera.ecelp4800')
    expect(v.mime.type('ecelp7470')).toEqual('audio/vnd.nuera.ecelp7470')
    expect(v.mime.type('ecelp9600')).toEqual('audio/vnd.nuera.ecelp9600')
    expect(v.mime.type('wav')).toEqual('audio/vnd.wav')
    expect(v.mime.type('weba')).toEqual('audio/webm')
    expect(v.mime.type('mka')).toEqual('audio/x-matroska')
    expect(v.mime.type('m3u')).toEqual('audio/x-mpegurl')
    expect(v.mime.type('wax')).toEqual('audio/x-ms-wax')
    expect(v.mime.type('wma')).toEqual('audio/x-ms-wma')
    expect(v.mime.type('ra')).toEqual('audio/x-pn-realaudio')
    expect(v.mime.type('ram')).toEqual('audio/x-pn-realaudio')
    expect(v.mime.type('rmp')).toEqual('audio/x-pn-realaudio-plugin')
    expect(v.mime.type('cdx')).toEqual('chemical/x-cdx')
    expect(v.mime.type('cif')).toEqual('chemical/x-cif')
    expect(v.mime.type('cmdf')).toEqual('chemical/x-cmdf')
    expect(v.mime.type('cml')).toEqual('chemical/x-cml')
    expect(v.mime.type('csml')).toEqual('chemical/x-csml')
    expect(v.mime.type('xyz')).toEqual('chemical/x-xyz')
    expect(v.mime.type('woff')).toEqual('font/woff')
    expect(v.mime.type('woff2')).toEqual('font/woff2')
    expect(v.mime.type('gcode')).toEqual('gcode')
    expect(v.mime.type('avif')).toEqual('image/avif')
    expect(v.mime.type('avifs')).toEqual('image/avif')
    expect(v.mime.type('bmp')).toEqual('image/bmp')
    expect(v.mime.type('cgm')).toEqual('image/cgm')
    expect(v.mime.type('g3')).toEqual('image/g3fax')
    expect(v.mime.type('gif')).toEqual('image/gif')
    expect(v.mime.type('heif')).toEqual('image/heic')
    expect(v.mime.type('heic')).toEqual('image/heic')
    expect(v.mime.type('ief')).toEqual('image/ief')
    expect(v.mime.type('jpe')).toEqual('image/pjpeg')
    expect(v.mime.type('jpeg')).toEqual('image/pjpeg')
    expect(v.mime.type('jpg')).toEqual('image/pjpeg')
    expect(v.mime.type('pjpg')).toEqual('image/pjpeg')
    expect(v.mime.type('jfif')).toEqual('image/pjpeg')
    expect(v.mime.type('jfif-tbnl')).toEqual('image/pjpeg')
    expect(v.mime.type('jif')).toEqual('image/pjpeg')
    expect(v.mime.type('jfi')).toEqual('image/pjpeg')
    expect(v.mime.type('png')).toEqual('image/png')
    expect(v.mime.type('btif')).toEqual('image/prs.btif')
    expect(v.mime.type('svg')).toEqual('image/svg+xml')
    expect(v.mime.type('svgz')).toEqual('image/svg+xml')
    expect(v.mime.type('tif')).toEqual('image/tiff')
    expect(v.mime.type('tiff')).toEqual('image/tiff')
    expect(v.mime.type('psd')).toEqual('image/vnd.adobe.photoshop')
    expect(v.mime.type('djv')).toEqual('image/vnd.djvu')
    expect(v.mime.type('djvu')).toEqual('image/vnd.djvu')
    expect(v.mime.type('dwg')).toEqual('image/vnd.dwg')
    expect(v.mime.type('dxf')).toEqual('image/vnd.dxf')
    expect(v.mime.type('fbs')).toEqual('image/vnd.fastbidsheet')
    expect(v.mime.type('fpx')).toEqual('image/vnd.fpx')
    expect(v.mime.type('fst')).toEqual('image/vnd.fst')
    expect(v.mime.type('mmr')).toEqual('image/vnd.fujixerox.edmics-mmr')
    expect(v.mime.type('rlc')).toEqual('image/vnd.fujixerox.edmics-rlc')
    expect(v.mime.type('mdi')).toEqual('image/vnd.ms-modi')
    expect(v.mime.type('npx')).toEqual('image/vnd.net-fpx')
    expect(v.mime.type('wbmp')).toEqual('image/vnd.wap.wbmp')
    expect(v.mime.type('xif')).toEqual('image/vnd.xiff')
    expect(v.mime.type('webp')).toEqual('image/webp')
    expect(v.mime.type('dng')).toEqual('image/x-adobe-dng')
    expect(v.mime.type('cr2')).toEqual('image/x-canon-cr2')
    expect(v.mime.type('crw')).toEqual('image/x-canon-crw')
    expect(v.mime.type('ras')).toEqual('image/x-cmu-raster')
    expect(v.mime.type('cmx')).toEqual('image/x-cmx')
    expect(v.mime.type('erf')).toEqual('image/x-epson-erf')
    expect(v.mime.type('fh')).toEqual('image/x-freehand')
    expect(v.mime.type('fh4')).toEqual('image/x-freehand')
    expect(v.mime.type('fh5')).toEqual('image/x-freehand')
    expect(v.mime.type('fh7')).toEqual('image/x-freehand')
    expect(v.mime.type('fhc')).toEqual('image/x-freehand')
    expect(v.mime.type('raf')).toEqual('image/x-fuji-raf')
    expect(v.mime.type('icns')).toEqual('image/x-icns')
    expect(v.mime.type('ico')).toEqual('image/x-icon')
    expect(v.mime.type('k25')).toEqual('image/x-kodak-k25')
    expect(v.mime.type('kdc')).toEqual('image/x-kodak-kdc')
    expect(v.mime.type('mrw')).toEqual('image/x-minolta-mrw')
    expect(v.mime.type('nef')).toEqual('image/x-nikon-nef')
    expect(v.mime.type('orf')).toEqual('image/x-olympus-orf')
    expect(v.mime.type('raw')).toEqual('image/x-panasonic-raw')
    expect(v.mime.type('rw2')).toEqual('image/x-panasonic-raw')
    expect(v.mime.type('rwl')).toEqual('image/x-panasonic-raw')
    expect(v.mime.type('pcx')).toEqual('image/x-pcx')
    expect(v.mime.type('pef')).toEqual('image/x-pentax-pef')
    expect(v.mime.type('ptx')).toEqual('image/x-pentax-pef')
    expect(v.mime.type('pct')).toEqual('image/x-pict')
    expect(v.mime.type('pic')).toEqual('image/x-pict')
    expect(v.mime.type('pnm')).toEqual('image/x-portable-anymap')
    expect(v.mime.type('pbm')).toEqual('image/x-portable-bitmap')
    expect(v.mime.type('pgm')).toEqual('image/x-portable-graymap')
    expect(v.mime.type('ppm')).toEqual('image/x-portable-pixmap')
    expect(v.mime.type('rgb')).toEqual('image/x-rgb')
    expect(v.mime.type('x3f')).toEqual('image/x-sigma-x3f')
    expect(v.mime.type('arw')).toEqual('image/x-sony-arw')
    expect(v.mime.type('sr2')).toEqual('image/x-sony-sr2')
    expect(v.mime.type('srf')).toEqual('image/x-sony-srf')
    expect(v.mime.type('xbm')).toEqual('image/x-xbitmap')
    expect(v.mime.type('xpm')).toEqual('image/x-xpixmap')
    expect(v.mime.type('xwd')).toEqual('image/x-xwindowdump')
    expect(v.mime.type('eml')).toEqual('message/rfc822')
    expect(v.mime.type('mht')).toEqual('message/rfc822')
    expect(v.mime.type('mhtml')).toEqual('message/rfc822')
    expect(v.mime.type('mime')).toEqual('message/rfc822')
    expect(v.mime.type('nws')).toEqual('message/rfc822')
    expect(v.mime.type('iges')).toEqual('model/iges')
    expect(v.mime.type('igs')).toEqual('model/iges')
    expect(v.mime.type('mesh')).toEqual('model/mesh')
    expect(v.mime.type('msh')).toEqual('model/mesh')
    expect(v.mime.type('silo')).toEqual('model/mesh')
    expect(v.mime.type('dwf')).toEqual('model/vnd.dwf')
    expect(v.mime.type('gdl')).toEqual('model/vnd.gdl')
    expect(v.mime.type('gtw')).toEqual('model/vnd.gtw')
    expect(v.mime.type('mts')).toEqual('model/vnd.mts')
    expect(v.mime.type('vtu')).toEqual('model/vnd.vtu')
    expect(v.mime.type('vrml')).toEqual('model/vrml')
    expect(v.mime.type('wrl')).toEqual('model/vrml')
    expect(v.mime.type('test')).toEqual('test/mimetype')
    expect(v.mime.type('ics')).toEqual('text/calendar')
    expect(v.mime.type('ifb')).toEqual('text/calendar')
    expect(v.mime.type('css')).toEqual('text/css')
    expect(v.mime.type('csv')).toEqual('text/csv')
    expect(v.mime.type('htm')).toEqual('text/html')
    expect(v.mime.type('html')).toEqual('text/html')
    expect(v.mime.type('js')).toEqual('text/javascript')
    expect(v.mime.type('md')).toEqual('text/markdown')
    expect(v.mime.type('markdown')).toEqual('text/markdown')
    expect(v.mime.type('mdown')).toEqual('text/markdown')
    expect(v.mime.type('markdn')).toEqual('text/markdown')
    expect(v.mime.type('conf')).toEqual('text/plain')
    expect(v.mime.type('def')).toEqual('text/plain')
    expect(v.mime.type('diff')).toEqual('text/plain')
    expect(v.mime.type('in')).toEqual('text/plain')
    expect(v.mime.type('ksh')).toEqual('text/plain')
    expect(v.mime.type('list')).toEqual('text/plain')
    expect(v.mime.type('log')).toEqual('text/plain')
    expect(v.mime.type('text')).toEqual('text/plain')
    expect(v.mime.type('txt')).toEqual('text/plain')
    expect(v.mime.type('dsc')).toEqual('text/prs.lines.tag')
    expect(v.mime.type('rtx')).toEqual('text/richtext')
    expect(v.mime.type('sgm')).toEqual('text/sgml')
    expect(v.mime.type('sgml')).toEqual('text/sgml')
    expect(v.mime.type('tsv')).toEqual('text/tab-separated-values')
    expect(v.mime.type('man')).toEqual('text/troff')
    expect(v.mime.type('me')).toEqual('text/troff')
    expect(v.mime.type('ms')).toEqual('text/troff')
    expect(v.mime.type('roff')).toEqual('text/troff')
    expect(v.mime.type('t')).toEqual('text/troff')
    expect(v.mime.type('tr')).toEqual('text/troff')
    expect(v.mime.type('uri')).toEqual('text/uri-list')
    expect(v.mime.type('uris')).toEqual('text/uri-list')
    expect(v.mime.type('urls')).toEqual('text/uri-list')
    expect(v.mime.type('curl')).toEqual('text/vnd.curl')
    expect(v.mime.type('dcurl')).toEqual('text/vnd.curl.dcurl')
    expect(v.mime.type('mcurl')).toEqual('text/vnd.curl.mcurl')
    expect(v.mime.type('scurl')).toEqual('text/vnd.curl.scurl')
    expect(v.mime.type('fly')).toEqual('text/vnd.fly')
    expect(v.mime.type('flx')).toEqual('text/vnd.fmi.flexstor')
    expect(v.mime.type('gv')).toEqual('text/vnd.graphviz')
    expect(v.mime.type('3dml')).toEqual('text/vnd.in3d.3dml')
    expect(v.mime.type('spot')).toEqual('text/vnd.in3d.spot')
    expect(v.mime.type('jad')).toEqual('text/vnd.sun.j2me.app-descriptor')
    expect(v.mime.type('si')).toEqual('text/vnd.wap.si')
    expect(v.mime.type('sl')).toEqual('text/vnd.wap.sl')
    expect(v.mime.type('wml')).toEqual('text/vnd.wap.wml')
    expect(v.mime.type('wmls')).toEqual('text/vnd.wap.wmlscript')
    expect(v.mime.type('asm')).toEqual('text/x-asm')
    expect(v.mime.type('s')).toEqual('text/x-asm')
    expect(v.mime.type('c')).toEqual('text/x-c')
    expect(v.mime.type('cc')).toEqual('text/x-c')
    expect(v.mime.type('cpp')).toEqual('text/x-c')
    expect(v.mime.type('cxx')).toEqual('text/x-c')
    expect(v.mime.type('dic')).toEqual('text/x-c')
    expect(v.mime.type('h')).toEqual('text/x-c')
    expect(v.mime.type('hh')).toEqual('text/x-c')
    expect(v.mime.type('f')).toEqual('text/x-fortran')
    expect(v.mime.type('f77')).toEqual('text/x-fortran')
    expect(v.mime.type('f90')).toEqual('text/x-fortran')
    expect(v.mime.type('for')).toEqual('text/x-fortran')
    expect(v.mime.type('java')).toEqual('text/x-java-source')
    expect(v.mime.type('p')).toEqual('text/x-pascal')
    expect(v.mime.type('pas')).toEqual('text/x-pascal')
    expect(v.mime.type('pp')).toEqual('text/x-pascal')
    expect(v.mime.type('inc')).toEqual('text/x-pascal')
    expect(v.mime.type('py')).toEqual('text/x-python')
    expect(v.mime.type('etx')).toEqual('text/x-setext')
    expect(v.mime.type('uu')).toEqual('text/x-uuencode')
    expect(v.mime.type('vcs')).toEqual('text/x-vcalendar')
    expect(v.mime.type('vcf')).toEqual('text/x-vcard')
    expect(v.mime.type('h261')).toEqual('video/h261')
    expect(v.mime.type('h263')).toEqual('video/h263')
    expect(v.mime.type('h264')).toEqual('video/h264')
    expect(v.mime.type('jpgv')).toEqual('video/jpeg')
    expect(v.mime.type('jpgm')).toEqual('video/jpm')
    expect(v.mime.type('jpm')).toEqual('video/jpm')
    expect(v.mime.type('mj2')).toEqual('video/mj2')
    expect(v.mime.type('mjp2')).toEqual('video/mj2')
    expect(v.mime.type('ts')).toEqual('video/mp2t')
    expect(v.mime.type('mpg4')).toEqual('video/mp4')
    expect(v.mime.type('m1v')).toEqual('video/mpeg')
    expect(v.mime.type('m2v')).toEqual('video/mpeg')
    expect(v.mime.type('mpa')).toEqual('video/mpeg')
    expect(v.mime.type('mpe')).toEqual('video/mpeg')
    expect(v.mime.type('mpeg')).toEqual('video/mpeg')
    expect(v.mime.type('mpg')).toEqual('video/mpeg')
    expect(v.mime.type('ogv')).toEqual('video/ogg')
    expect(v.mime.type('mov')).toEqual('video/quicktime')
    expect(v.mime.type('qt')).toEqual('video/quicktime')
    expect(v.mime.type('fvt')).toEqual('video/vnd.fvt')
    expect(v.mime.type('m4u')).toEqual('video/vnd.mpegurl')
    expect(v.mime.type('mxu')).toEqual('video/vnd.mpegurl')
    expect(v.mime.type('pyv')).toEqual('video/vnd.ms-playready.media.pyv')
    expect(v.mime.type('viv')).toEqual('video/vnd.vivo')
    expect(v.mime.type('webm')).toEqual('video/webm')
    expect(v.mime.type('f4v')).toEqual('video/x-f4v')
    expect(v.mime.type('fli')).toEqual('video/x-fli')
    expect(v.mime.type('flv')).toEqual('video/x-flv')
    expect(v.mime.type('mkv')).toEqual('video/x-matroska')
    expect(v.mime.type('asf')).toEqual('video/x-ms-asf')
    expect(v.mime.type('asx')).toEqual('video/x-ms-asf')
    expect(v.mime.type('wm')).toEqual('video/x-ms-wm')
    expect(v.mime.type('wmv')).toEqual('video/x-ms-wmv')
    expect(v.mime.type('wmx')).toEqual('video/x-ms-wmx')
    expect(v.mime.type('wvx')).toEqual('video/x-ms-wvx')
    expect(v.mime.type('avi')).toEqual('video/x-msvideo')
    expect(v.mime.type('movie')).toEqual('video/x-sgi-movie')
    expect(v.mime.type('ice')).toEqual('x-conference/x-cooltalk')
  })

  it('Should return null when extension is invalid', async () => {
    expect(v.mime.type('invalid')).toEqual(null)
  })
})
